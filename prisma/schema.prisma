generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Enum Role User
enum UserRole {
  DPO
  BPH
  PENGURUS
  ANGGOTA
}

// Enum Department
enum Department {
  INFOKOM
  PSDM
  LITBANG
  KWU
}

// Enum Position
enum Position {
  KETUA_UMUM
  WAKIL_KETUA_UMUM
  SEKRETARIS
  BENDAHARA
  KEPALA_DEPARTEMEN
  STAFF_DEPARTEMEN
}

// Enum Finance Type
enum FinanceType {
  INCOME
  EXPENSE
}

// Enum Document Type
enum DocumentType {
  PROPOSAL
  LPJ
  BUDGET_PLAN
  TIMELINE
  WORKPLAN
  FINANCIAL_REPORT
  ATTENDANCE_LIST
  ACTIVITY_REPORT
  EVALUATION_REPORT
  INVOICE
  RECEIPT
  OFFICIAL_LETTER
  MEMORANDUM
  POSTER
  BROCHURE
  PRESENTATION
  CERTIFICATE
  DECREE
  OTHER
}

// Enum Status untuk berbagai entitas
enum Status {
 DRAFT
 PENDING
 PUBLISH
 PRIVATE
 ARCHIVE
}

// Enum Status untuk berbagai entitas
enum StatusApproval{
 APPROVED
 REJECTED
}


// Enum Letter Type
enum LetterType {
  OUTGOING
  INCOMING
}

// Enum Letter Priority
enum LetterPriority {
  NORMAL
  IMPORTANT
  URGENT
}

// Enum Approval Entity Type
enum ApprovalType {
  WORK_PROGRAM
  EVENT
  FINANCE
  DOCUMENT
  ARTICLE
  LETTER
  SHORT_LINK
  LINK_HUB
  LINK_HUB_DETAIL
  LINK_HUB_THEME
  ORGANIZATIONAL_STRUCTURE
  DEPARTMENT_TASK
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String     @unique
  username      String     @unique
  password      String
  role          UserRole   @default(ANGGOTA)
  department    Department?
  position      Position?
  isActive      Boolean    @default(true)
  verifiedAccount Boolean    @default(false)
  attemptLogin  Int        @default(0)
  blockExpires  DateTime?
  avatarColor   String     @default("#3B82F6")
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // Relations
  linkHubs         LinkHub[]
  approvals        Approval[]
  managements      Management[]
  linkHubThemes    LinkHubTheme[]
  shortLinks       ShortLink[]
  articles         Article[]
  finances         Finance[]
  documents        Document[]
  createdLetters   Letter[]       @relation("LetterCreator")
  approvedLetters  Letter[]       @relation("LetterApprover")
  workPrograms     WorkProgram[]  @relation("WorkProgramResponsible")
  events           Event[]        @relation("EventResponsible")
  departmentTasks  DepartmentTask[]

  @@index([email, role, isActive, department, position])
  @@map("users")
}

model Period {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  startYear   Int
  endYear     Int
  isActive    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  managements Management[]
  finances    Finance[]
  letters     Letter[]
  workPrograms WorkProgram[]
  events      Event[]
  articles    Article[]
  organizationalStructures OrganizationalStructure[] @relation("OrganizationalStructurePeriod")

  @@index([isActive, startYear, endYear])
  @@map("periods")
}

model Management {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  userId     String     @db.ObjectId
  periodId   String     @db.ObjectId
  position   Position
  photo      String?
  department Department
  isActive    Boolean  @default(false) // NEW Menandakan apakah manajemen tersebut aktif pada periode tersebut
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  period Period @relation(fields: [periodId], references: [id], onDelete: Cascade)

  @@unique([userId, periodId])
  @@unique([periodId, position, department])
  @@index([department, position])
  @@map("managements")
}

model WorkProgram {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  department  Department
  schedule    String
  status      Status     @default(DRAFT)
  funds       Float
  usedFunds   Float      @default(0)
  remainingFunds Float   @default(0)
  goal        String
  periodId    String     @db.ObjectId
  responsibleId String   @db.ObjectId
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relations
  period          Period           @relation(fields: [periodId], references: [id], onDelete: Cascade)
  approvals       Approval[]       @relation("WorkProgramApprovals")
  events          Event[]
  responsible     User             @relation(fields: [responsibleId], references: [id], onDelete: Cascade, name: "WorkProgramResponsible")

  @@index([department, status, periodId])
  @@map("workPrograms")
}

model Event {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  slug         String   @unique
  thumbnail    String?    // URL gambar thumbnail
  description  String
  responsibleId String     @db.ObjectId
  goal         String
  department   Department
  periodId     String     @db.ObjectId
  startDate    DateTime
  endDate      DateTime
  funds        Float
  usedFunds    Float      @default(0)
  remainingFunds Float    @default(0)
  status       Status     @default(DRAFT)
  workProgramId String?    @db.ObjectId
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt

  // Relations
  period        Period          @relation(fields: [periodId], references: [id], onDelete: Cascade)
  workProgram   WorkProgram?    @relation(fields: [workProgramId], references: [id], onDelete: SetNull)
  documents     Document[]
  approvals     Approval[]      @relation("EventApprovals")
  galleries     Gallery[]
  finances      Finance[]
  letters       Letter[]
  responsible   User            @relation(fields: [responsibleId], references: [id], onDelete: Cascade, name: "EventResponsible")

  @@index([startDate, status, periodId, department])
  @@map("events")
}

model Document {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  eventId   String?        @db.ObjectId
  letterId  String?        @db.ObjectId
  type      DocumentType
  status    Status         @default(PENDING)
  document   String?      // URL dokumen
  userId    String         @db.ObjectId
  version   Int            @default(1)
  parentId  String?        @db.ObjectId
  isCurrent Boolean        @default(true)
  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt

  // Relations
  event           Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  letter          Letter?   @relation(fields: [letterId], references: [id], onDelete: Cascade)
  previousVersion Document?  @relation("DocumentVersions", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  nextVersions    Document[] @relation("DocumentVersions")
  approvals       Approval[] @relation("DocumentApprovals")

  @@index([type, status, userId])
  @@map("documents")
}

model Gallery {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  title    String
  image    String
  eventId  String     @db.ObjectId
  gallery String?  // URL gambar
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@index([eventId])
  @@map("galleries")
}

model Article {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  slug         String   @unique
  thumbnail    String? // URL gambar thumbnail
  content      String
  authorId     String     @db.ObjectId
  categoryId   String     @db.ObjectId
  periodId     String?    @db.ObjectId
  isPublished  Boolean  @default(false)
  publishedAt  DateTime?
  status       Status   @default(DRAFT)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade)
  category CategoryArticle @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  period   Period?         @relation(fields: [periodId], references: [id], onDelete: SetNull)
  approvals Approval[]     @relation("ArticleApprovals")

  @@index([isPublished, authorId, categoryId, status])
  @@map("articles")
}
model CategoryArticle {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String    @unique
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  // Relations
  articles Article[]

  @@map("categoryArticles")
}

model CategoryFinance {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId
  name        String      @unique
  description String?
  type        FinanceType
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  // Relations
  finances Finance[]

  @@index([type, isActive])
  @@map("categoriesFinance")
}

model Finance {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  amount      Float
  description String
  date        DateTime
  categoryId  String     @db.ObjectId
  type        FinanceType
  periodId    String     @db.ObjectId
  eventId     String?    @db.ObjectId
  userId      String     @db.ObjectId
  status      Status   @default(PENDING)
  proof       String?   // URL file bukti transaksi
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  category CategoryFinance @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  period   Period          @relation(fields: [periodId], references: [id], onDelete: Cascade)
  event    Event?          @relation(fields: [eventId], references: [id], onDelete: SetNull)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals Approval[]     @relation("FinanceApprovals")

  @@index([date, type, categoryId, status, periodId])
  @@map("finances")
}

model OrganizationalStructure {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  status   Status   @default(PENDING)
  periodId String     @db.ObjectId
  decree   String   // URL file Surat Keputusan (SK)
  structure   String?  // JSX as string
  isActive    Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  period      Period           @relation(fields: [periodId], references: [id], onDelete: Cascade, name: "OrganizationalStructurePeriod")
  approvals Approval[] @relation("OrganizationalStructureApprovals")

  @@index([status, isActive])
  @@map("organizationalStructures")
}

model DepartmentTask {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId
  note       String
  department Department
  userId     String?    @db.ObjectId
  status     Status     @default(PENDING)
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt

  // Relations
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull)
  approvals Approval[] @relation("DepartmentTaskApprovals")

  @@index([department, userId, status])
  @@map("departmentTasks")
}

model LinkHub {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String     @db.ObjectId
  username  String?
  themeId   String?    @db.ObjectId
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  theme     LinkHubTheme? @relation(fields: [themeId], references: [id], onDelete: SetNull)
  details   LinkHubDetail[]
  approvals Approval[]   @relation("LinkHubApprovals")

  @@index([userId, status])
  @@map("linkHubs")
}

model LinkHubDetail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  linkHubId String     @db.ObjectId
  title     String
  shortLink String?
  url       String
  thumbnail String?
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  linkHub   LinkHub @relation(fields: [linkHubId], references: [id], onDelete: Cascade)
  approvals Approval[] @relation("LinkHubDetailApprovals")

  @@index([linkHubId, status])
  @@map("linkHubDetails")
}

model LinkHubTheme {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  userId    String     @db.ObjectId
  data      String?
  isActive  Boolean  @default(false)
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  linkHubs LinkHub[]
  approvals Approval[] @relation("LinkHubThemeApprovals")

  @@index([isActive, userId, status])
  @@map("linkHubThemes")
}

model ShortLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  shortName String   @unique
  url       String
  userId    String     @db.ObjectId
  status    Status   @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  approvals Approval[] @relation("ShortLinkApprovals")

  @@index([userId, status])
  @@map("shortLinks")
}

model Letter {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  number       String?        @unique
  regarding    String
  origin       String
  destination  String
  date         DateTime
  type         LetterType
  priority     LetterPriority @default(NORMAL)
  body         String?
  letter       String?        // URL file surat
  notes        String?
  status       Status         @default(PENDING)
  createdById  String         @db.ObjectId
  approvedById String?        @db.ObjectId
  periodId     String?        @db.ObjectId
  eventId      String?        @db.ObjectId
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt

  // Relations
  createdBy    User           @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "LetterCreator")
  approvedBy   User?          @relation(fields: [approvedById], references: [id], onDelete: SetNull, name: "LetterApprover")
  period       Period?        @relation(fields: [periodId], references: [id], onDelete: SetNull)
  event        Event?         @relation(fields: [eventId], references: [id], onDelete: SetNull)
  attachments  Document[]
  approvals    Approval[]     @relation("LetterApprovals")

  @@index([type, priority, status, createdById, periodId])
  @@map("letters")
}

// Unified Approval Model dengan relasi yang benar
model Approval {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  entityType   ApprovalType
  entityId     String             @db.ObjectId
  userId       String             @db.ObjectId
  status       StatusApproval
  note         String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt

  // Relations
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  // Opposite relations untuk setiap entitas
  workProgram          WorkProgram?          @relation("WorkProgramApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  event                Event?                @relation("EventApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  finance              Finance?              @relation("FinanceApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  document             Document?             @relation("DocumentApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  article              Article?              @relation("ArticleApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  letter               Letter?               @relation("LetterApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  shortLink            ShortLink?            @relation("ShortLinkApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  linkHub              LinkHub?              @relation("LinkHubApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  linkHubDetail        LinkHubDetail?        @relation("LinkHubDetailApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  linkHubTheme         LinkHubTheme?         @relation("LinkHubThemeApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  organizationalStructure OrganizationalStructure? @relation("OrganizationalStructureApprovals", fields: [entityId], references: [id], onDelete: Cascade)
  departmentTask       DepartmentTask?       @relation("DepartmentTaskApprovals", fields: [entityId], references: [id], onDelete: Cascade)

  @@index([entityType, entityId, userId, status])
  @@map("approvals")
}