// Prisma Client Generator - Generates TypeScript types and database client
generator client {
  provider = "prisma-client-js"
}

// Database Configuration - Uses MongoDB as the database provider
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL") // Database connection URL from environment variables
}

// Enum untuk peran pengguna dalam organisasi
// DPO: Dewan Pengurus Organisasi (tingkat tertinggi)
// BPH: Badan Pengurus Harian (pengurus harian)
// PENGURUS: Anggota pengurus
// ANGGOTA: Anggota biasa
enum UserRole {
  DPO      // Dewan Pengurus Organisasi
  BPH      // Badan Pengurus Harian
  PENGURUS // Pengurus
  ANGGOTA  // Anggota
}

// Enum untuk departemen dalam organisasi
// BPH: Badan Pengurus Harian
// INFOKOM: Departemen Informasi dan Komunikasi
// PSDM: Departemen Pengembangan Sumber Daya Manusia
// LITBANG: Departemen Penelitian dan Pengembangan
// KWU: Departemen Kewirausahaan
enum Department {
  // BPH Departments
  BPH     // Badan Pengurus Harian
  // Departments
  INFOKOM // Departemen Informasi dan Komunikasi
  PSDM    // Departemen Pengembangan Sumber Daya Mahasiswa
  LITBANG // Departemen Penelitian dan Pengembangan
  KWU     // Departemen Kewirausahaan
}

// Enum untuk posisi jabatan dalam organisasi
// KETUA_UMUM: Ketua Umum (pimpinan tertinggi)
// WAKIL_KETUA_UMUM: Wakil Ketua Umum
// SEKRETARIS: Sekretaris (penanggung jawab administrasi)
// BENDAHARA: Bendahara (penanggung jawab keuangan)
// KEPALA_DEPARTEMEN: Kepala Departemen
// STAFF_DEPARTEMEN: Staff Departemen
enum Position {
  // BPH Positions
  KETUA_UMUM        // Ketua Umum
  WAKIL_KETUA_UMUM  // Wakil Ketua Umum
  SEKRETARIS        // Sekretaris
  BENDAHARA         // Bendahara
  // Department Positions
  KEPALA_DEPARTEMEN // Kepala Departemen
  STAFF_DEPARTEMEN  // Staff Departemen
}

// Enum untuk jenis transaksi keuangan
// INCOME: Pemasukan (pendapatan)
// EXPENSE: Pengeluaran (biaya)
enum FinanceType {
  INCOME  // Pemasukan
  EXPENSE // Pengeluaran
}

// Enum untuk jenis dokumen yang dapat diunggah
// PROPOSAL: Proposal kegiatan
// LPJ: Laporan Pertanggungjawaban
// BUDGET_PLAN: Rencana Anggaran Biaya
// TIMELINE: Timeline kegiatan
// WORKPLAN: Rencana Kerja
// FINANCIAL_REPORT: Laporan Keuangan
// ATTENDANCE_LIST: Daftar Hadir
// ACTIVITY_REPORT: Laporan Kegiatan
// EVALUATION_REPORT: Laporan Evaluasi
// INVOICE: Faktur
// RECEIPT: Kwitansi
// OFFICIAL_LETTER: Surat Resmi
// MEMORANDUM: Memorandum
// POSTER: Poster
// BROCHURE: Brosur
// PRESENTATION: Presentasi
// CERTIFICATE: Sertifikat
// DECREE: Surat Keputusan
// OTHER: Lainnya
enum DocumentType {
  PROPOSAL         // Proposal kegiatan
  LPJ              // Laporan Pertanggungjawaban
  BUDGET_PLAN      // Rencana Anggaran Biaya
  TIMELINE         // Timeline kegiatan
  WORKPLAN         // Rencana Kerja
  FINANCIAL_REPORT // Laporan Keuangan
  ATTENDANCE_LIST  // Daftar Hadir
  ACTIVITY_REPORT  // Laporan Kegiatan
  EVALUATION_REPORT // Laporan Evaluasi
  INVOICE          // Faktur
  RECEIPT          // Kwitansi
  OFFICIAL_LETTER  // Surat Resmi
  MEMORANDUM       // Memorandum
  POSTER           // Poster
  BROCHURE         // Brosur
  PRESENTATION     // Presentasi
  CERTIFICATE      // Sertifikat
  DECREE           // Surat Keputusan
  OTHER            // Lainnya
}

// Enum untuk status berbagai entitas dalam sistem
// DRAFT: Draft, belum dipublikasikan
// PENDING: Menunggu persetujuan atau proses
// PUBLISH: Sudah dipublikasikan
// PRIVATE: Hanya dapat diakses oleh pihak tertentu
// ARCHIVE: Diarsipkan, tidak aktif
enum Status {
 DRAFT   // Draft
 PENDING // Menunggu persetujuan
 PUBLISH // Sudah dipublikasikan
 PRIVATE // Hanya untuk pihak tertentu
 ARCHIVE // Diarsipkan
}

// Enum untuk status persetujuan pada berbagai entitas
// APPROVED: Disetujui
// REJECTED: Ditolak
enum StatusApproval {
  APPROVED // Disetujui
  REJECTED // Ditolak
}

// Enum untuk jenis surat
// OUTGOING: Surat keluar (dikirim dari organisasi)
// INCOMING: Surat masuk (diterima oleh organisasi)
enum LetterType {
  OUTGOING // Surat keluar
  INCOMING // Surat masuk
}

// Enum untuk tingkat prioritas surat
// NORMAL: Prioritas normal
// IMPORTANT: Penting
// URGENT: Mendesak
enum LetterPriority {
  NORMAL    // Prioritas normal
  IMPORTANT // Penting
  URGENT    // Mendesak
}

// Enum untuk jenis entitas yang memerlukan persetujuan
// WORK_PROGRAM: Program kerja
// EVENT: Kegiatan/acara
// FINANCE: Transaksi keuangan
// DOCUMENT: Dokumen
// ARTICLE: Artikel
// LETTER: Surat
// SHORT_LINK: Short link
// LINK_HUB: Link hub
// LINK_HUB_DETAIL: Detail link hub
// LINK_HUB_THEME: Tema link hub
// ORGANIZATIONAL_STRUCTURE: Struktur organisasi
// DEPARTMENT_TASK: Tugas departemen
enum ApprovalType {
  WORK_PROGRAM           // Program kerja
  EVENT                  // Kegiatan/acara
  FINANCE                // Transaksi keuangan
  DOCUMENT               // Dokumen
  ARTICLE                // Artikel
  LETTER                 // Surat
  SHORT_LINK             // Short link
  LINK_HUB               // Link hub
  LINK_HUB_DETAIL        // Detail link hub
  LINK_HUB_THEME         // Tema link hub
  ORGANIZATIONAL_STRUCTURE // Struktur organisasi
  DEPARTMENT_TASK        // Tugas departemen
}

// Model untuk data pengguna sistem
// Menyimpan informasi lengkap tentang anggota organisasi
model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId // ID unik pengguna (auto-generated)
  name          String     // Nama lengkap pengguna
  email         String     @unique // Email pengguna (harus unik)
  username      String     @unique // Username untuk login (harus unik)
  password      String     // Password terenkripsi
  role          UserRole   @default(ANGGOTA) // Peran pengguna dalam organisasi
  department    Department? // Departemen pengguna (opsional)
  position      Position?   // Jabatan pengguna (opsional)
  isActive      Boolean    @default(true) // Status aktif pengguna
  verifiedAccount Boolean    @default(false) // Status verifikasi akun
  attemptLogin  Int        @default(0) // Jumlah percobaan login gagal
  blockExpires  DateTime?  // Waktu kapan blokir login berakhir
  avatarColor   String     @default("#3B82F6") // Warna avatar default
  createdAt     DateTime   @default(now()) // Waktu pembuatan akun
  updatedAt     DateTime   @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan pengguna
  linkHubs         LinkHub[]      // Link hubs yang dibuat pengguna
  approvals        Approval[]     // Persetujuan yang diberikan pengguna
  managements      Management[]   // Jabatan manajemen pengguna
  linkHubThemes    LinkHubTheme[] // Tema link hub yang dibuat pengguna
  shortLinks       ShortLink[]    // Short links yang dibuat pengguna
  articles         Article[]      // Artikel yang ditulis pengguna
  finances         Finance[]      // Transaksi keuangan yang dibuat pengguna
  documents        Document[]     // Dokumen yang diunggah pengguna
  createdLetters   Letter[]       @relation("LetterCreator")   // Surat yang dibuat pengguna
  approvedLetters  Letter[]       @relation("LetterApprover")  // Surat yang disetujui pengguna
  workPrograms     WorkProgram[]  @relation("WorkProgramResponsible") // Program kerja yang bertanggung jawab
  events           Event[]        @relation("EventResponsible") // Kegiatan yang bertanggung jawab
  departmentTasks  DepartmentTask[] // Tugas departemen yang ditugaskan

  @@index([email, role, isActive, department, position])
  @@map("users")
}

// Model untuk periode organisasi
// Menyimpan informasi tentang periode kepengurusan organisasi
model Period {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik periode (auto-generated)
  name        String   // Nama periode (contoh: "2023-2024")
  startYear   Int      // Tahun mulai periode
  endYear     Int      // Tahun akhir periode
  isActive    Boolean  @default(false) // Status aktif periode
  createdAt   DateTime @default(now()) // Waktu pembuatan periode
  updatedAt   DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan periode
  managements Management[] // Jabatan manajemen dalam periode ini
  finances    Finance[]    // Transaksi keuangan dalam periode ini
  letters     Letter[]     // Surat yang dibuat dalam periode ini
  workPrograms WorkProgram[] // Program kerja dalam periode ini
  events      Event[]      // Kegiatan dalam periode ini
  articles    Article[]    // Artikel yang dibuat dalam periode ini
  organizationalStructures OrganizationalStructure[] @relation("OrganizationalStructurePeriod") // Struktur organisasi periode ini

  @@index([isActive, startYear, endYear])
  @@map("periods")
}

// Model untuk jabatan manajemen
// Menyimpan informasi tentang jabatan pengguna dalam periode tertentu
model Management {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId // ID unik jabatan manajemen (auto-generated)
  userId     String     @db.ObjectId // ID pengguna yang menjabat
  periodId   String     @db.ObjectId // ID periode jabatan
  position   Position   // Jabatan yang dipegang
  photo      String?    // URL foto pengguna dalam jabatan ini
  department Department // Departemen jabatan
  createdAt  DateTime   @default(now()) // Waktu pembuatan jabatan
  updatedAt  DateTime   @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan jabatan manajemen
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)   // Pengguna yang menjabat
  period Period @relation(fields: [periodId], references: [id], onDelete: Cascade) // Periode jabatan

  @@unique([userId, periodId])
  @@unique([periodId, position, department])
  @@index([department, position])
  @@map("managements")
}

// Model untuk program kerja
// Menyimpan informasi tentang program kerja departemen dalam periode tertentu
model WorkProgram {
  id          String     @id @default(auto()) @map("_id") @db.ObjectId // ID unik program kerja (auto-generated)
  name        String     // Nama program kerja
  department  Department // Departemen yang menjalankan program
  schedule    String     // Jadwal pelaksanaan program
  status      Status     @default(DRAFT) // Status program kerja
  funds       Float      // Dana yang dialokasikan
  usedFunds   Float      @default(0) // Dana yang sudah digunakan
  remainingFunds Float   @default(0) // Sisa dana
  goal        String     // Tujuan program kerja
  periodId    String     @db.ObjectId // ID periode program
  responsibleId String   @db.ObjectId // ID pengguna yang bertanggung jawab
  createdAt   DateTime   @default(now()) // Waktu pembuatan program
  updatedAt   DateTime   @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan program kerja
  period          Period           @relation(fields: [periodId], references: [id], onDelete: Cascade) // Periode program kerja
  approvals       Approval[]       @relation("WorkProgramApprovals") // Persetujuan untuk program kerja
  events          Event[]          // Kegiatan yang termasuk dalam program kerja
  responsible     User             @relation(fields: [responsibleId], references: [id], onDelete: Cascade, name: "WorkProgramResponsible") // Pengguna yang bertanggung jawab

  @@index([department, status, periodId])
  @@map("workPrograms")
}

// Model untuk kegiatan/acara
// Menyimpan informasi lengkap tentang kegiatan yang diselenggarakan organisasi
model Event {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId // ID unik kegiatan (auto-generated)
  name         String     // Nama kegiatan
  slug         String     @unique // Slug unik untuk URL kegiatan
  thumbnail    String?    // URL gambar thumbnail kegiatan
  description  String     // Deskripsi lengkap kegiatan
  responsibleId String    @db.ObjectId // ID pengguna yang bertanggung jawab
  goal         String     // Tujuan kegiatan
  department   Department // Departemen penyelenggara
  periodId     String     @db.ObjectId // ID periode kegiatan
  startDate    DateTime   // Tanggal dan waktu mulai kegiatan
  endDate      DateTime   // Tanggal dan waktu selesai kegiatan
  funds        Float      // Dana yang dialokasikan untuk kegiatan
  usedFunds    Float      @default(0) // Dana yang sudah digunakan
  remainingFunds Float    @default(0) // Sisa dana kegiatan
  status       Status     @default(DRAFT) // Status kegiatan
  workProgramId String?   @db.ObjectId // ID program kerja terkait (opsional)
  createdAt    DateTime   @default(now()) // Waktu pembuatan kegiatan
  updatedAt    DateTime   @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan kegiatan
  period        Period          @relation(fields: [periodId], references: [id], onDelete: Cascade) // Periode kegiatan
  workProgram   WorkProgram?    @relation(fields: [workProgramId], references: [id], onDelete: SetNull) // Program kerja terkait
  documents     Document[]      // Dokumen yang terkait dengan kegiatan
  approvals     Approval[]      @relation("EventApprovals") // Persetujuan untuk kegiatan
  galleries     Gallery[]       // Galeri foto kegiatan
  finances      Finance[]       // Transaksi keuangan kegiatan
  letters       Letter[]        // Surat yang terkait dengan kegiatan
  responsible   User            @relation(fields: [responsibleId], references: [id], onDelete: Cascade, name: "EventResponsible") // Pengguna yang bertanggung jawab

  @@index([startDate, status, periodId, department])
  @@map("events")
}

// Model untuk dokumen
// Menyimpan informasi tentang dokumen yang diunggah ke sistem
model Document {
  id        String         @id @default(auto()) @map("_id") @db.ObjectId // ID unik dokumen (auto-generated)
  name      String         // Nama dokumen
  eventId   String?        @db.ObjectId // ID kegiatan terkait (opsional)
  letterId  String?        @db.ObjectId // ID surat terkait (opsional)
  type      DocumentType   // Tipe dokumen
  status    Status         @default(PENDING) // Status dokumen
  document   String?       // URL dokumen
  userId    String         @db.ObjectId // ID pengguna yang mengunggah
  version   Int            @default(1) // Versi dokumen
  parentId  String?        @db.ObjectId // ID dokumen induk (untuk versioning)
  isCurrent Boolean        @default(true) // Apakah ini versi terbaru
  createdAt DateTime       @default(now()) // Waktu pembuatan dokumen
  updatedAt DateTime       @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan dokumen
  event           Event?    @relation(fields: [eventId], references: [id], onDelete: Cascade) // Kegiatan terkait
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade) // Pengguna yang mengunggah
  letter          Letter?   @relation(fields: [letterId], references: [id], onDelete: Cascade) // Surat terkait
  previousVersion Document?  @relation("DocumentVersions", fields: [parentId], references: [id], onDelete: NoAction, onUpdate: NoAction) // Versi sebelumnya
  nextVersions    Document[] @relation("DocumentVersions") // Versi selanjutnya
  approvals       Approval[] @relation("DocumentApprovals") // Persetujuan untuk dokumen

  @@index([type, status, userId])
  @@map("documents")
}

// Model untuk galeri foto
// Menyimpan informasi tentang foto-foto yang terkait dengan kegiatan
model Gallery {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik galeri (auto-generated)
  title    String   // Judul foto
  image    String   // Nama file gambar
  eventId  String     @db.ObjectId // ID kegiatan terkait
  gallery String?  // URL gambar
  createdAt DateTime @default(now()) // Waktu pembuatan galeri
  updatedAt DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan galeri
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade) // Kegiatan terkait

  @@index([eventId])
  @@map("galleries")
}

// Model untuk artikel
// Menyimpan informasi tentang artikel yang dipublikasikan di website
model Article {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik artikel (auto-generated)
  title        String   // Judul artikel
  slug         String   @unique // Slug unik untuk URL artikel
  thumbnail    String? // URL gambar thumbnail
  content      String   // Isi artikel
  authorId     String     @db.ObjectId // ID penulis artikel
  categoryId   String     @db.ObjectId // ID kategori artikel
  periodId     String?    @db.ObjectId // ID periode terkait (opsional)
  isPublished  Boolean  @default(false) // Status publikasi artikel
  publishedAt  DateTime? // Tanggal publikasi artikel
  status       Status   @default(DRAFT) // Status artikel
  createdAt    DateTime @default(now()) // Waktu pembuatan artikel
  updatedAt    DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan artikel
  author   User            @relation(fields: [authorId], references: [id], onDelete: Cascade) // Penulis artikel
  category CategoryArticle @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Kategori artikel
  period   Period?         @relation(fields: [periodId], references: [id], onDelete: SetNull) // Periode terkait
  approvals Approval[]     @relation("ArticleApprovals") // Persetujuan untuk artikel

  @@index([isPublished, authorId, categoryId, status])
  @@map("articles")
}
model CategoryArticle {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId // ID unik kategori artikel (auto-generated)
  name      String    @unique // Nama kategori artikel (harus unik)
  createdAt DateTime  @default(now()) // Waktu pembuatan kategori
  updatedAt DateTime  @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan kategori artikel
  articles Article[] // Artikel yang termasuk dalam kategori ini

  @@map("categoryArticles")
}

model CategoryFinance {
  id          String      @id @default(auto()) @map("_id") @db.ObjectId // ID unik kategori keuangan (auto-generated)
  name        String      @unique // Nama kategori keuangan (harus unik)
  description String?     // Deskripsi kategori keuangan
  type        FinanceType // Tipe kategori (pemasukan/pengeluaran)
  isActive    Boolean     @default(true) // Status aktif kategori
  createdAt   DateTime    @default(now()) // Waktu pembuatan kategori
  updatedAt   DateTime    @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan kategori keuangan
  finances Finance[] // Transaksi keuangan yang termasuk dalam kategori ini

  @@index([type, isActive])
  @@map("categoriesFinance")
}

model Finance {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String   // Nama transaksi
  amount      Float    // Jumlah nominal transaksi
  description String   // Deskripsi transaksi
  date        DateTime // Tanggal transaksi
  categoryId  String     @db.ObjectId
  type        FinanceType // Tipe transaksi (pemasukan/pengeluaran)
  periodId    String     @db.ObjectId
  eventId     String?    @db.ObjectId
  userId      String     @db.ObjectId
  status      Status   @default(PENDING) // Status transaksi
  proof       String?   // URL file bukti transaksi
  createdAt   DateTime @default(now()) // Waktu pembuatan transaksi
  updatedAt   DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan transaksi keuangan
  category CategoryFinance @relation(fields: [categoryId], references: [id], onDelete: Cascade) // Kategori transaksi
  period   Period          @relation(fields: [periodId], references: [id], onDelete: Cascade)   // Periode transaksi
  event    Event?          @relation(fields: [eventId], references: [id], onDelete: SetNull)    // Kegiatan terkait (opsional)
  user     User            @relation(fields: [userId], references: [id], onDelete: Cascade)     // Pengguna yang membuat transaksi
  approvals Approval[]     @relation("FinanceApprovals") // Persetujuan untuk transaksi

  @@index([date, type, categoryId, status, periodId])
  @@map("finances")
}

model OrganizationalStructure {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik struktur organisasi (auto-generated)
  name     String   // Nama struktur organisasi
  status   Status   @default(PENDING) // Status struktur organisasi
  periodId String     @db.ObjectId // ID periode struktur organisasi
  decree   String   // URL file Surat Keputusan (SK)
  structure   String?  // JSX as string
  createdAt DateTime @default(now()) // Waktu pembuatan struktur
  updatedAt DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan struktur organisasi
  period      Period           @relation(fields: [periodId], references: [id], onDelete: Cascade, name: "OrganizationalStructurePeriod") // Periode struktur organisasi
  approvals Approval[] @relation("OrganizationalStructureApprovals") // Persetujuan untuk struktur organisasi

  @@index([status])
  @@map("organizationalStructures")
}

model DepartmentTask {
  id         String     @id @default(auto()) @map("_id") @db.ObjectId // ID unik tugas departemen (auto-generated)
  note       String     // Catatan tugas departemen
  department Department // Departemen yang memiliki tugas
  userId     String?    @db.ObjectId // ID pengguna yang ditugaskan (opsional)
  status     Status     @default(PENDING) // Status tugas departemen
  createdAt  DateTime   @default(now()) // Waktu pembuatan tugas
  updatedAt  DateTime   @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan tugas departemen
  user User? @relation(fields: [userId], references: [id], onDelete: SetNull) // Pengguna yang ditugaskan
  approvals Approval[] @relation("DepartmentTaskApprovals") // Persetujuan untuk tugas departemen

  @@index([department, userId, status])
  @@map("departmentTasks")
}

model LinkHub {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik link hub (auto-generated)
  userId    String     @db.ObjectId // ID pengguna pemilik link hub
  username  String?    // Username pengguna (opsional)
  themeId   String?    @db.ObjectId // ID tema link hub (opsional)
  status    Status   @default(PENDING) // Status link hub
  createdAt DateTime @default(now()) // Waktu pembuatan link hub
  updatedAt DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan link hub
  user      User         @relation(fields: [userId], references: [id], onDelete: Cascade) // Pemilik link hub
  theme     LinkHubTheme? @relation(fields: [themeId], references: [id], onDelete: SetNull) // Tema link hub
  details   LinkHubDetail[] // Detail link dalam hub
  approvals Approval[]   @relation("LinkHubApprovals") // Persetujuan link hub

  @@index([userId, status])
  @@map("linkHubs")
}

model LinkHubDetail {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik detail link hub (auto-generated)
  linkHubId String     @db.ObjectId // ID link hub induk
  title     String     // Judul link
  shortLink String?    // Short link (opsional)
  url       String     // URL asli link
  thumbnail String?    // URL gambar thumbnail
  status    Status   @default(PENDING) // Status detail link
  createdAt DateTime @default(now()) // Waktu pembuatan detail link
  updatedAt DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan detail link hub
  linkHub   LinkHub @relation(fields: [linkHubId], references: [id], onDelete: Cascade) // Link hub induk
  approvals Approval[] @relation("LinkHubDetailApprovals") // Persetujuan detail link

  @@index([linkHubId, status])
  @@map("linkHubDetails")
}

model LinkHubTheme {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik tema link hub (auto-generated)
  name      String   // Nama tema
  userId    String     @db.ObjectId // ID pengguna pembuat tema
  data      String?  // Data konfigurasi tema (opsional)
  isActive  Boolean  @default(false) // Status aktif tema
  status    Status   @default(PENDING) // Status tema
  createdAt DateTime @default(now()) // Waktu pembuatan tema
  updatedAt DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan tema link hub
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade) // Pembuat tema
  linkHubs LinkHub[] // Link hubs yang menggunakan tema ini
  approvals Approval[] @relation("LinkHubThemeApprovals") // Persetujuan tema

  @@index([isActive, userId, status])
  @@map("linkHubThemes")
}

model ShortLink {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId // ID unik short link (auto-generated)
  title     String   // Judul short link
  shortName String   @unique // Nama pendek unik untuk short link
  url       String   // URL asli yang akan di-shortlink
  userId    String     @db.ObjectId // ID pengguna pembuat short link
  status    Status   @default(PENDING) // Status short link
  createdAt DateTime @default(now()) // Waktu pembuatan short link
  updatedAt DateTime @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan short link
  user User @relation(fields: [userId], references: [id], onDelete: Cascade) // Pembuat short link
  approvals Approval[] @relation("ShortLinkApprovals") // Persetujuan short link

  @@index([userId, status])
  @@map("shortLinks")
}

model Letter {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId // ID unik surat (auto-generated)
  number       String?        @unique // Nomor surat (unik)
  regarding    String         // Perihal surat
  origin       String         // Asal surat
  destination  String         // Tujuan surat
  date         DateTime       // Tanggal surat
  type         LetterType     // Tipe surat
  priority     LetterPriority @default(NORMAL) // Prioritas surat
  body         String?        // Isi surat (opsional)
  letter       String?        // URL file surat
  notes        String?        // Catatan tambahan
  status       Status         @default(PENDING) // Status surat
  createdById  String         @db.ObjectId // ID pengguna yang membuat surat
  approvedById String?        @db.ObjectId // ID pengguna yang menyetujui surat (opsional)
  periodId     String?        @db.ObjectId // ID periode surat (opsional)
  eventId      String?        @db.ObjectId // ID kegiatan terkait (opsional)
  createdAt    DateTime       @default(now()) // Waktu pembuatan surat
  updatedAt    DateTime       @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan surat
  createdBy    User           @relation(fields: [createdById], references: [id], onDelete: Cascade, name: "LetterCreator") // Pembuat surat
  approvedBy   User?          @relation(fields: [approvedById], references: [id], onDelete: SetNull, name: "LetterApprover") // Penyetuju surat
  period       Period?        @relation(fields: [periodId], references: [id], onDelete: SetNull) // Periode surat
  event        Event?         @relation(fields: [eventId], references: [id], onDelete: SetNull) // Kegiatan terkait
  attachments  Document[] // Dokumen lampiran surat
  approvals    Approval[]     @relation("LetterApprovals") // Persetujuan surat

  @@index([type, priority, status, createdById, periodId])
  @@map("letters")
}

// Unified Approval Model dengan relasi yang benar - Model terpadu untuk semua jenis persetujuan
model Approval {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId // ID unik persetujuan (auto-generated)
  entityType   ApprovalType       // Tipe entitas yang memerlukan persetujuan
  entityId     String             @db.ObjectId // ID entitas yang memerlukan persetujuan
  userId       String             @db.ObjectId // ID pengguna yang memberikan persetujuan
  status       StatusApproval     // Status persetujuan (APPROVED/REJECTED)
  note         String?            // Catatan tambahan untuk persetujuan
  createdAt    DateTime           @default(now()) // Waktu pembuatan persetujuan
  updatedAt    DateTime           @updatedAt // Waktu terakhir update

  // Relations - Data yang terkait dengan persetujuan
  user         User               @relation(fields: [userId], references: [id], onDelete: Cascade) // Pengguna yang memberikan persetujuan

  // Opposite relations untuk setiap entitas - Relasi terbalik ke berbagai jenis entitas
  workProgram          WorkProgram?          @relation("WorkProgramApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan program kerja
  event                Event?                @relation("EventApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan kegiatan
  finance              Finance?              @relation("FinanceApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan transaksi keuangan
  document             Document?             @relation("DocumentApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan dokumen
  article              Article?              @relation("ArticleApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan artikel
  letter               Letter?               @relation("LetterApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan surat
  shortLink            ShortLink?            @relation("ShortLinkApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan short link
  linkHub              LinkHub?              @relation("LinkHubApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan link hub
  linkHubDetail        LinkHubDetail?        @relation("LinkHubDetailApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan detail link hub
  linkHubTheme         LinkHubTheme?         @relation("LinkHubThemeApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan tema link hub
  organizationalStructure OrganizationalStructure? @relation("OrganizationalStructureApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan struktur organisasi
  departmentTask       DepartmentTask?       @relation("DepartmentTaskApprovals", fields: [entityId], references: [id], onDelete: Cascade) // Persetujuan tugas departemen

  @@index([entityType, entityId, userId, status])
  @@map("approvals")
}
